// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Supplier {
    _id?: string;
    name: string;
    email: string;
    phone: string;
    address: string;
    status: boolean;
}

interface SuppliersApiResponse {
    suppliers: Supplier[];
}

export interface SuppliersSliceState {
    suppliers: Supplier[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: SuppliersSliceState = {
    suppliers: [],
    status: "idle",
};


// Define a service using a base URL and expected endpoints
export const suppliersApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/supplier" }),
    reducerPath: "suppliersApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Suppliers"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `SuppliersApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getSuppliers: build.query<SuppliersApiResponse, void>({
            query: () => '',
            providesTags: ['Suppliers'],
        }),
        getSupplier: build.query<SuppliersApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Suppliers'],
        }),
        addSupplier: build.mutation<Supplier, Omit<Supplier, 'status'>>({
            query: (newSupplier) => ({
                url: '',
                method: 'POST',
                body: newSupplier,
            }),
            invalidatesTags: [{ type: 'Suppliers' }],
        }),
        updateSupplier: build.mutation<Supplier, { id: string; data: Partial<Supplier> }>({
            query: ({ id, data }) => ({
                url: `/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: [{ type: 'Suppliers' }],
        }),
        deleteSupplier: build.mutation<{ deletingSupplier: Supplier }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Suppliers' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `suppliersApiSlice.endpoints.getSuppliers.useQuery`
// Same as `suppliersApiSlice.endpoints.getSupplier.useQuery`
// Same as `suppliersApiSlice.endpoints.addSupplier.useMutation`
// Same as `suppliersApiSlice.endpoints.updateSupplier.useMutation`
// Same as `suppliersApiSlice.endpoints.deleteSupplier.useMutation`
export const { useGetSuppliersQuery, useGetSupplierQuery, useAddSupplierMutation, useUpdateSupplierMutation, useDeleteSupplierMutation } = suppliersApiSlice;
