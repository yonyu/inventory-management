// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Unit {
    _id?: string;
    name: String;
    status: Boolean;
}

interface UnitsApiResponse {
    units: Unit[];
}

export interface UnitsSliceState {
    units: Unit[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: UnitsSliceState = {
    units: [],
    status: "idle",
};


// Define a service using a base URL and expected endpoints
export const unitsApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/unit" }),
    reducerPath: "unitsApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Units"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `UnitsApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getUnits: build.query<UnitsApiResponse, void>({
            query: () => '',
            providesTags: ['Units'],
        }),
        getUnit: build.query<UnitsApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Units'],
        }),
        addUnit: build.mutation<Unit, Omit<Unit, 'status'>>({
            query: (newUnit) => ({
                url: '',
                method: 'POST',
                body: newUnit,
            }),
            invalidatesTags: [{ type: 'Units' }],
        }),
        updateUnit: build.mutation<Unit, { id: string; data: Partial<Unit> }>({
            query: ({ id, data }) => ({
                url: `/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: [{ type: 'Units' }],
        }),
        deleteUnit: build.mutation<{ deletingUnit: Unit }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Units' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `unitsApiSlice.endpoints.getUnits.useQuery`
// Same as `unitsApiSlice.endpoints.getUnit.useQuery`
// Same as `unitsApiSlice.endpoints.addUnit.useMutation`
// Same as `unitsApiSlice.endpoints.updateUnit.useMutation`
// Same as `unitsApiSlice.endpoints.deleteUnit.useMutation`
export const { useGetUnitsQuery, useGetUnitQuery, useAddUnitMutation, useUpdateUnitMutation, useDeleteUnitMutation } = unitsApiSlice;
