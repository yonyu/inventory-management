// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Customer {
    _id?: string;
    name: string;
    address: string;
    status: boolean;
    email: string;
    mobileNumber: number;
    image: string;
}

interface CustomersApiResponse {
    customers: Customer[];
}

export interface CustomersSliceState {
    customers: Customer[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: CustomersSliceState = {
    customers: [],
    status: "idle",
};



// Create RTK Query API slice for customer operations
// RTK Query provides automatic caching, background refetching, and optimistic updates
export const customersApiSlice = createApi({
    // Base query configuration - sets the base URL for all endpoints
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/customer" }),
    // Unique key for this API slice in the Redux store
    reducerPath: "customersApi",
    // Tag types are used for caching and invalidation
    // When a mutation invalidates a tag, all queries with that tag will refetch
    tagTypes: ["Customers"],
    // Define API endpoints (queries for fetching data, mutations for modifying data)
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `CustomersApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getCustomers: build.query<CustomersApiResponse, void>({
            query: () => '',
            providesTags: ['Customers'],
        }),
        getCustomer: build.query<CustomersApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Customers'],
        }),
        addCustomer: build.mutation<Customer, Omit<Customer, 'status'>>({
            query: (newCustomer) => ({
                url: '',
                method: 'POST',
                body: newCustomer,
            }),
            invalidatesTags: [{ type: 'Customers' }],
        }),
        updateCustomer: build.mutation<Customer, { _id: string; data: Partial<Customer> }>({
            query: ({ _id, data }) => ({
                url: `/${_id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: [{ type: 'Customers' }],
        }),
        deleteCustomer: build.mutation<{ deletingCustomer: Customer }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Customers' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `customersApiSlice.endpoints.getCustomers.useQuery`
// Same as `customersApiSlice.endpoints.getCustomer.useQuery`
// Same as `customersApiSlice.endpoints.addCustomer.useMutation`
// Same as `customersApiSlice.endpoints.updateCustomer.useMutation`
// Same as `customersApiSlice.endpoints.deleteCustomer.useMutation`
export const { useGetCustomersQuery, useGetCustomerQuery, useAddCustomerMutation, useUpdateCustomerMutation, useDeleteCustomerMutation } = customersApiSlice;
