// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Invoice {
    _id?: string;
    invoiceNumber: string;
    invoiceDate: Date;
    description: string;
    status: boolean;
}

interface InvoicesApiResponse {
    invoices: Invoice[];
}

export interface InvoicesSliceState {
    invoices: Invoice[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: InvoicesSliceState = {
    invoices: [],
    status: "idle",
};



// Create RTK Query API slice for invoice operations
// RTK Query provides automatic caching, background refetching, and optimistic updates
export const invoicesApiSlice = createApi({
    // Base query configuration - sets the base URL for all endpoints
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/invoice" }),
    // Unique key for this API slice in the Redux store
    reducerPath: "invoicesApi",
    // Tag types are used for caching and invalidation
    // When a mutation invalidates a tag, all queries with that tag will refetch
    tagTypes: ["Invoices"],
    // Define API endpoints (queries for fetching data, mutations for modifying data)
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `InvoicesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getInvoices: build.query<InvoicesApiResponse, void>({
            query: () => '',
            providesTags: ['Invoices'],
        }),
        getInvoice: build.query<InvoicesApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Invoices'],
        }),
        addInvoice: build.mutation<Invoice, any>({
            query: (newInvoice) => ({
                url: '',
                method: 'POST',
                body: newInvoice,
            }),
            invalidatesTags: [{ type: 'Invoices' }],
        }),
        // updateInvoice: build.mutation<Invoice, { _id: string; data: Partial<Invoice> }>({
        //     query: ({ _id, data }) => ({
        //         url: `/${_id}`,
        //         method: 'PUT',
        //         body: data,
        //     }),
        //     invalidatesTags: [{ type: 'Invoices' }],
        // }),
        deleteInvoice: build.mutation<{ deletingInvoice: Invoice }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Invoices' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `invoicesApiSlice.endpoints.getInvoices.useQuery`
// Same as `invoicesApiSlice.endpoints.getInvoice.useQuery`
// Same as `invoicesApiSlice.endpoints.addInvoice.useMutation`
// Same as `invoicesApiSlice.endpoints.updateInvoice.useMutation`
// Same as `invoicesApiSlice.endpoints.deleteInvoice.useMutation`
export const { useGetInvoicesQuery, useGetInvoiceQuery, useAddInvoiceMutation, /*useUpdateInvoiceMutation,*/ useDeleteInvoiceMutation } = invoicesApiSlice;
