// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";


interface Order {
    _id?: string;
    product: string | { _id: string; name: string };
    supplier: string | { _id: string; name: string };
    category: string | { _id: string; name: string };
    date: string; 

    order_number: string; 

    description: string; 
    quantity: number; 
    unit_price: number; 
    total_cost: number; 

    status: boolean; 
    deletedAt: string; 
    deleted: boolean;
}

interface OrdersApiResponse {
    orders: Order[];
}

export interface OrdersSliceState {
    orders: Order[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: OrdersSliceState = {
    orders: [],
    status: "idle",
};



// Create RTK Query API slice for order operations
// RTK Query provides automatic caching, background refetching, and optimistic updates
export const ordersApiSlice = createApi({
    // Base query configuration - sets the base URL for all endpoints
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/order" }),
    // Unique key for this API slice in the Redux store
    reducerPath: "ordersApi",
    // Tag types are used for caching and invalidation
    // When a mutation invalidates a tag, all queries with that tag will refetch
    tagTypes: ["Orders"],
    // Define API endpoints (queries for fetching data, mutations for modifying data)
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `OrdersApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getOrders: build.query<OrdersApiResponse, void>({
            query: () => '',
            providesTags: ['Orders'],
        }),
        getOrder: build.query<OrdersApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Orders'],
        }),
        addOrder: build.mutation<Order | Order[], Omit<Order, 'status'> | Omit<Order, 'status'>[]>({
            query: (newOrder) => ({
                url: '',
                method: 'POST',
                body: newOrder,
            }),
            invalidatesTags: [{ type: 'Orders' }],
        }),
        updateOrder: build.mutation<Order, { _id: string; data: Partial<Order> }>({
            query: ({ _id, data }) => ({
                url: `/${_id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: [{ type: 'Orders' }],
        }),
        deleteOrder: build.mutation<{ deletingOrder: Order }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Orders' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `ordersApiSlice.endpoints.getOrders.useQuery`
// Same as `ordersApiSlice.endpoints.getOrder.useQuery`
// Same as `ordersApiSlice.endpoints.addOrder.useMutation`
// Same as `ordersApiSlice.endpoints.updateOrder.useMutation`
// Same as `ordersApiSlice.endpoints.deleteOrder.useMutation`
export const { useGetOrdersQuery, useGetOrderQuery, useAddOrderMutation, useUpdateOrderMutation, useDeleteOrderMutation } = ordersApiSlice;
