// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Product {
    _id?: string;
    name: string;
    quantity: number;
    unit: string;
    category: string;
    supplier: string;
}

interface ProductsApiResponse {
    products: Product[];
}

export interface ProductsSliceState {
    products: Product[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: ProductsSliceState = {
    products: [],
    status: "idle",
};



// Create RTK Query API slice for product operations
// RTK Query provides automatic caching, background refetching, and optimistic updates
export const productsApiSlice = createApi({
    // Base query configuration - sets the base URL for all endpoints
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/product" }),
    // Unique key for this API slice in the Redux store
    reducerPath: "productsApi",
    // Tag types are used for caching and invalidation
    // When a mutation invalidates a tag, all queries with that tag will refetch
    tagTypes: ["Products"],
    // Define API endpoints (queries for fetching data, mutations for modifying data)
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `ProductsApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getProducts: build.query<ProductsApiResponse, void>({
            query: () => '',
            providesTags: ['Products'],
        }),
        getProduct: build.query<ProductsApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Products'],
        }),
        addProduct: build.mutation<Product, Omit<Product, 'status'>>({
            query: (newProduct) => ({
                url: '',
                method: 'POST',
                body: newProduct,
            }),
            invalidatesTags: [{ type: 'Products' }],
        }),
        updateProduct: build.mutation<Product, { _id: string; data: Partial<Product> }>({
            query: ({ _id, data }) => ({
                url: `/${_id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: [{ type: 'Products' }],
        }),
        deleteProduct: build.mutation<{ deletingProduct: Product }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Products' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `productsApiSlice.endpoints.getProducts.useQuery`
// Same as `productsApiSlice.endpoints.getProduct.useQuery`
// Same as `productsApiSlice.endpoints.addProduct.useMutation`
// Same as `productsApiSlice.endpoints.updateProduct.useMutation`
// Same as `productsApiSlice.endpoints.deleteProduct.useMutation`
export const { useGetProductsQuery, useGetProductQuery, useAddProductMutation, useUpdateProductMutation, useDeleteProductMutation } = productsApiSlice;
