// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Category {
    _id?: string;
    name: String;
    status: Boolean;
}

interface CategoriesApiResponse {
    categories: Category[];
}

export interface CategoriesSliceState {
    categories: Category[];
    status: "idle" | "loading" | "failed" | "fulfilled";
}

const initialState: CategoriesSliceState = {
    categories: [],
    status: "idle",
};


// Define a service using a base URL and expected endpoints
export const categoriesApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "/api/user/category" }),
    reducerPath: "categoriesApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Categories"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `CategoriesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getCategories: build.query<CategoriesApiResponse, void>({
            query: () => '',
            providesTags: ['Categories'],
        }),
        getCategory: build.query<CategoriesApiResponse, string>({
            query: (name) => `?name=${name}`,
            providesTags: ['Categories'],
        }),
        addCategory: build.mutation<Category, Omit<Category, 'status'>>({
            query: (newCategory) => ({
                url: '',
                method: 'POST',
                body: newCategory,
            }),
            invalidatesTags: [{ type: 'Categories' }],
        }),
        updateCategory: build.mutation<Category, { id: string; data: Partial<Category> }>({
            query: ({ id, data }) => ({
                url: `/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: [{ type: 'Categories' }],
        }),
        deleteCategory: build.mutation<{ deletingCategory: Category }, string>({
            query: (id) => ({
                url: `/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: [{ type: 'Categories' }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `categoriesApiSlice.endpoints.getCategories.useQuery`
// Same as `categoriesApiSlice.endpoints.getCategory.useQuery`
// Same as `categoriesApiSlice.endpoints.addCategory.useMutation`
// Same as `categoriesApiSlice.endpoints.updateCategory.useMutation`
// Same as `categoriesApiSlice.endpoints.deleteCategory.useMutation`
export const { useGetCategoriesQuery, useGetCategoryQuery, useAddCategoryMutation, useUpdateCategoryMutation, useDeleteCategoryMutation } = categoriesApiSlice;
